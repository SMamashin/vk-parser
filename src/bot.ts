import { VK } from 'vk-io';
import { token } from './config';
import { writeFile } from 'fs/promises';

const vk = new VK({
  token: token,
});

console.log("[Bot]: +")

vk.updates.on('message_new', async (context) => {
  const message = context.message.text.toLowerCase();
  const angry: string = "üò°"
  if (context.isDM) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
    if (message === '–ø—Ä–∏–≤–µ—Ç' || message === '–Ω–∞—á–∞—Ç—å' || message === '/start')
    {
      await context.send(`–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–Ω –ø—Ä—è–º–∏–∫–æ–º –Ω–∞ TypeScript –Ω–∞—Ñ–∏–≥ ${angry}!!!`);
    } 
    else if (message === '–ø–æ–∫–∞')
    {
      await context.send('–ü–æ–∫–∞! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!');
    } 
    else if (message === '/me' || message.startsWith('/check')) {
      let userId: string;
      if (message === '/me') {
        userId = context.senderId;
      } else {
        const commandParts = message.split(' ');
        if (commandParts.length === 2) {
          if (commandParts[1].startsWith('id')) {
            userId = commandParts[1];
          } else {
            const userInfo = await vk.api.users.get({
              user_ids: commandParts[1],
              fields: ['id'],
            });
            userId = userInfo[0].id;
          }
        } else {
          await context.send('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check (–∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥–æ–º–µ–Ω).');
          return;
        }
      }

      const userInfo = await vk.api.users.get({
        user_ids: userId,
        fields: ['sex', 'city', 'status', 'domain', 'bdate', 'followers_count', 'career', 'personal', 'last_seen', 'counters', 'activities', 'connections'],
      });

      if (userInfo.length === 0) {
        await context.send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }  
      const { first_name, last_name, sex, city, status, domain, bdate, followers_count, career, personal, last_seen, counters, activities, connections } = userInfo[0];

      let infoMessage = `${first_name} ${last_name}\n`;
      infoMessage += `–ü–æ–ª: ${sex === 1 ? '–ñ–µ–Ω—Å–∫–∏–π' : '–ú—É–∂—Å–∫–æ–π'}\n`;
      infoMessage += `–ì–æ—Ä–æ–¥: ${city ? city.title : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
      infoMessage += `–°—Ç–∞—Ç—É—Å: ${status ? status : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
      infoMessage += `–î–æ–º–µ–Ω: ${domain ? domain : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
      infoMessage += `–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${bdate ? bdate : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
      infoMessage += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${followers_count ? followers_count : '0'}\n`;
      infoMessage += `–Ø–∑—ã–∫–∏: ${personal ? personal.langs : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n`;
      infoMessage += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π: ${counters ? counters.friends : '0'}\n`;
      infoMessage += `–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${last_seen ? new Date(last_seen.time * 1000).toLocaleString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
      infoMessage += `–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${activities ? activities : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n`;
      infoMessage += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ—Å—Ç–≤: ${counters ? counters.groups : '0'}\n`;
      infoMessage += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø: ${counters ? counters.groups : '0'}`;

      await context.send(infoMessage);

      const jsonContent = JSON.stringify(userInfo[0], null, 2);
      const fileName = `users/user_${userId}.json`;

      try {
        await writeFile(fileName, jsonContent, 'utf8');
        console.log("–ó–∞–ø–∏—Å–∞–Ω–æ!");
      } catch (error) {
        console.log("–ù–µ –∑–∞–ø–∏—Å–∞–Ω–æ");
        console.error(error);
      }
    } 
  }
  else {
    await context.send('–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é.');
  }
});

vk.updates.start().catch(console.error);
